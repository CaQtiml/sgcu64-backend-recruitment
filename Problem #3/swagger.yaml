swagger: "2.0"
info:
  version: "1.0.2"
  title: "SGCU Company"
  contact:
    email: "lsivakorn@gmail.com"
tags:
- name: "user"
  description: "Operations that users can do."
schemes:
- "https"
- "http"
paths:
  /user:
    post:
      tags:
      - "user"
      summary: "Add the employee"
      operationId: "createUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Create an employee"
        required: true
        schema:
          $ref: "#/definitions/CreateUserRequest"
      responses:
        200:
          description: "successful operation"
        400:
          description: "Invalid object format"
          schema:
            $ref: "#/definitions/Error"
        409:
          description: "User already exists."
          schema:
            $ref: "#/definitions/Error"
          
    get:
      tags:
      - "user"
      summary: "Retrieve all employee data"
      operationId: "getUsers"
      produces:
      - "application/json"
      parameters: 
      - name: "firstname"
        in: "query"
        type: "string"
      - name: "lastname"
        in: "query"
        type: "string"
      - name: "id"
        in: "query"
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: array
            items: 
              $ref: "#/definitions/GetUser"
              
  /user/{id}:
    get:
      tags:
      - "user"
      summary: "Get the employee data by id"
      operationId: "getUserById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Enter the employee ID"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/GetUser"
        "404":
          description: "User not found"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
      - "user"
      summary: "Updated employee data"
      operationId: "updateUser"
      parameters:
      - name: "id"
        in: "path"
        description: "Enter the employee ID"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/UpdateUserRequest"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid object format"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "User not found"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
      - "user"
      summary: "Delete employee data"
      operationId: "deleteUser"
      parameters:
      - name: "id"
        in: "path"
        description: "Enter the employee ID"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
        "404":
          description: "User not found"
          schema:
            $ref: "#/definitions/Error"
  
  
definitions:
  GetUser:
    type: "object"
    required: [
      'id',
      'firstName',
      'lastName',
      'salary']
    properties:
      id:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      salary:
        type: "number"
        format: "double"
      role:
        type: "string"
        
  CreateUserRequest:
    type: "object"
    required: [
      'id',
      'firstName',
      'lastName',
      'salary',
      'password']
    properties:
      id:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      password:
        type: "string"
      salary:
        type: "number"
        format: "double"
      role:
        type: "string"
  UpdateUserRequest:
    type: "object"
    properties:
      firstName:
        type: "string"
      lastName:
        type: "string"
      salary:
        type: "number"
        format: "double"
      role:
        type: "string"
  Error:
    type: "object"
    properties:
      code:
        type: "string"
      description: 
        type: "string"
        description: "error description"